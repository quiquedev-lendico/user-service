openapi: '3.0.0'

info:
  title: user-service-api
  version: 0.0.1

paths:
  /users:
    post:
      summary: creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: request body validation error. check error message in response.
        '409':
          description: user id already exists
    get:
      summary: finds users per last and first name
      parameters:
        - in: query
          name: lastName
          required: true
          schema:
            $ref: '#/components/schemas/LastName'
        - in: query
          name: firstName
          required: true
          schema:
            $ref: '#/components/schemas/FirstName'
        - in: query
          name: maxNumUsers
          description: maximum number of users to find
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: list of users who matches the search criteria. empty if no one did.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: parameters validation error. check response body for details.

  /users/{userId}:
    get:
      summary: finds an user by the user id
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: user found for the given user id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: user id validation error
        '404':
          description: user not found for the given user id
    delete:
      summary: deletes an user by the user id
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: user has been deleted
        '400':
          description: user id validation error.
        '404':
          description: user not found for the given user id

  /users/{userId}/emails:
    post:
      summary: adds a new email to the given user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
      responses:
        '201':
          description: email has been added
        '400':
          description: request validation error. check response for details.
        '409':
          description: email with the given id already exists for the user

  /users/{userId}/emails/{emailId}:
    patch:
      summary: modifies an existing email of a given user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
        - in: path
          name: emailId
          required: true
          schema:
            $ref: '#/components/schemas/EmailId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mail'
      responses:
        '200':
          description: email has been modified
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MailModificationResult'
        '400':
          description: request validation error. check response for details.
        '404':
          description: email not found for user for the given email id

  /users/{userId}/phoneNumbers:
    post:
      summary: adds a new phone number to the given user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneNumber'
      responses:
        '201':
          description: phone number has been added
        '400':
          description: request validation error. check response for details.
        '409':
          description: phone number with the given id already exists for the user

  /users/{userId}/phoneNumbers/{phoneNumberId}:
    patch:
      summary: modifies an existing phone number of a given user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
        - in: path
          name: phoneNumberId
          required: true
          schema:
            $ref: '#/components/schemas/PhoneNumberId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Number'
      responses:
        '200':
          description: email has been modified
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NumberModificationResult'
        '400':
          description: request validation error. check response for details.
        '404':
          description: phone number not found for user for the given phone number id

components:
  schemas:
    EmailId:
      type: integer
      format: int32

    Mail:
     type: string
     minimum: 1
     maximum: 500

    Email:
      type: object
      required:
        - id
        - mail
      properties:
        id:
          $ref: '#/components/schemas/EmailId'
        mail:
          $ref: '#/components/schemas/Mail'

    MailModification:
      type: object
      required: 
        - value
      properties:
        value:
          $ref: '#/components/schemas/Mail'

    MailModificationResult:
      type: object
      required:
        - userId
        - emails
      properties:
        userId:
          $ref: '#/components/schemas/UserId'
        emails:
          type: array
          minItems: 1
          maxItems: 10
          items:
            $ref: '#/components/schemas/Email'

    PhoneNumberId:
      type: integer
      format: int32

    Number:
      type: string
      minimum: 1
      maximum: 500

    NumberModification:
      type: object
      required: 
        - value
      properties:
        value:
          $ref: '#/components/schemas/Number'
 
    NumberModificationResult:
      type: object
      required:
        - userId
        - phoneNumbers
      properties:
        userId:
          $ref: '#/components/schemas/UserId'
        phoneNumbers:
          type: array
          minItems: 1
          maxItems: 10
          items:
            $ref: '#/components/schemas/PhoneNumber'

    PhoneNumber:
      type: object
      required:
        - id
        - number
      properties:
        id:
          $ref: '#/components/schemas/PhoneNumberId'
        number:
          $ref: '#/components/schemas/Number'

    UserId:
      type: integer
      format: int32

    LastName:
       type: string
       minimum: 1
       maximum: 500
 
    FirstName:
       type: string
       minimum: 1
       maximum: 500

    User:
      type: object
      required:
        - id
        - lastName
        - firstName
        - emails
        - phoneNumbers
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        lastName:
          $ref: '#/components/schemas/LastName'
        firstName:
          $ref: '#/components/schemas/FirstName'
        emails:
          type: array
          minItems: 1
          maxItems: 10
          items:
            $ref: '#/components/schemas/Email'
        phoneNumbers:
          type: array
          minItems: 1
          maxItems: 10
          items:
            $ref: '#/components/schemas/PhoneNumber'

    NewUser:
      type: object
      required:
        - lastName
        - firstName
        - emails
        - phoneNumbers
      properties:
        lastName:
          $ref: '#/components/schemas/LastName'
        firstName:
          $ref: '#/components/schemas/FirstName'
        emails:
          type: array
          maxItems: 10
          items:
            $ref: '#/components/schemas/Email'
        phoneNumbers:
          type: array
          maxItems: 10
          items:
            $ref: '#/components/schemas/PhoneNumber'
